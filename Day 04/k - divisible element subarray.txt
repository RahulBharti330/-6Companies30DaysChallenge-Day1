class Trie {
    HashMap<Integer,Trie> children;
    
    Trie() {
        children = new HashMap<>();
    } 

    public int insertAndCount(int[] nums, int i, int k, int p){
        Trie t = this;
        int n  = nums.length;
        int ans  = 0;
        int count =0; // count of numbers divisble by p
        for(int j = i;j<n;j++) {
            if(nums[j]%p ==0) {
                count++;
            }

            if(count>k) {
                break; //limit se zyada hogya
            }

            //ab number add krte hain, if added alrady, then subsrray repeat ho gya, else nhi hua
            if(!t.children.containsKey(nums[j])){
                ans++; // new node ban rhi hai matlab naye subaaray ki entry ho rhi hai
                t.children.put(nums[j], new Trie());
            }
            t = t.children.get(nums[j]); // child pe chala gya respective
        }
        return ans;
    }
}
class Solution {
    //Brute Force with hashSet  = O(n^3) approach
    //we an use trie to make it O(n^2)
    public int countDistinct(int[] nums, int k, int p) {
        int n = nums.length;
        Trie t = new Trie();
        int res = 0;
        for(int i=0;i<n;i++) {
            res +=t.insertAndCount(nums, i,k,p);
        }
        return res;
    }
}