class Solution {

    public void computeLPS(String pat, int[]lps) {
        int len = 0;
        int i=1;
        lps[0] = 0;
        int m = pat.length();
        while(i<m) {
            if(pat.charAt(i)==pat.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            }
            else {
                if(len!=0) {
                    len=lps[len-1];
                }
                else {
                    lps[i] = 0;
                    i++;
                }

            }
        }
    }

    public List<Integer> kmp(String pat, String txt) {
        int m = pat.length();
        int n = txt.length();
        List<Integer> res = new ArrayList<>();
        int[] lps = new int[m];
        computeLPS(pat, lps);
        
        int i=0, j=0;
        while(i<n) {
            if(j<m && txt.charAt(i)==pat.charAt(j)) {
                i++; j++;
            }
            if(j==m) {
                res.add(i-j);
                j = lps[j-1];
            }
            else if(i<n && (j==0 || txt.charAt(i)!=pat.charAt(j))) {
                if(j!=0) j = lps[j-1];
                else i++;
            }
        }
        return res;
    }


    public int lowerBound(List<Integer> list, int target) {
        int st = 0, end = list.size()-1;
        int ind=list.size();
        while(st<=end) {
            int mid = st+(end-st)/2;
            if(list.get(mid)>=target) {
                ind = mid;
                end = mid-1;
            }
            else st = mid+1;
        }
        return ind;
    }
    public List<Integer> beautifulIndices(String s, String a, String b, int k) {
        int n = s.length();
        List<Integer> aInd = kmp(a, s);
        List<Integer> bInd = kmp(b, s);

        List<Integer> ls = new ArrayList<>();
        for(int i:aInd) {
            int upLimit= Math.min(n-1, i+k);
            int loLimit= Math.max(0, i-k);
            int ind = lowerBound(bInd, loLimit);
            if(ind<bInd.size() && bInd.get(ind)<=upLimit) ls.add(i);
        }
        return ls;
    }
}