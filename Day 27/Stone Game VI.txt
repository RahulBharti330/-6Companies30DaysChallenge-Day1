/*

:30


alice: [1,3] >> 
bob:   [2,1] >> 


solve(a, b, current_player, scoreA, scoreB) {

    .. base case

    if (current_player = 'alice') {
        index = bestIndex(a, b);
    } else {
        index = bestIndex(b, a);
    }
    return solve(a, b, other_player)

}


*/




class Solution {
    public int stoneGameVI(int[] aliceValues, int[] bobValues) {
        int len = aliceValues.length;
        Move[] moves = new Move[len];
        for(int i=0;i < len;i++)
            moves[i] = new Move(aliceValues[i], bobValues[i]);
        Arrays.sort(moves, 0, len);

        int scoreA =0;
        int scoreB = 0;
        for(int i=0;i < len;i++) {
            if((i&1) == 0) {
                // even
                scoreA += moves[i].v1;
            } else {
                scoreB += moves[i].v2;
            }
        }
        if (scoreA > scoreB)
            return 1;
        else if (scoreB > scoreA)
            return -1;
        else
            return 0;
    }



    static class Move implements Comparable<Move>{
        int v1;
        int v2;

        public Move(int v1, int v2) {
            this.v1 = v1;
            this.v2 = v2;
        }

        public int compareTo(Move other) {
            return Integer.compare(other.v1 + other.v2, v1+v2);
        }
    }
}